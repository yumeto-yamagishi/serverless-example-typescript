





### test POST /list without body.name
POST {{baseUrl}}/list
Content-Type: application/json
{}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "name"
          },
          message: "must have required property name"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}






### test POST /list with body.name="" (empty)
POST {{baseUrl}}/list
Content-Type: application/json
{"name": ""}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body/name",
          schemaPath: "#/properties/body/properties/name/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}






### test GET /list without queryStringParameters.listId
GET {{baseUrl}}/list
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test GET /list with queryStringParameters.listId="" (empty)
GET {{baseUrl}}/list?listId=
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters/listId",
          schemaPath: "#/properties/queryStringParameters/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test DELETE /list without queryStringParameters.listId
DELETE {{baseUrl}}/list
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test DELETE /list with queryStringParameters.listId="" (empty)
DELETE {{baseUrl}}/list?listId=
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters/listId",
          schemaPath: "#/properties/queryStringParameters/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test PUT /list without body.listId and body.name
PUT {{baseUrl}}/list
Content-Type: application/json
{}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "name"
          },
          message: "must have required property name"
        },
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}





### test PUT /list with body.listId="" and body.name=""
PUT {{baseUrl}}/list
Content-Type: application/json
{"listId": "", "name": ""}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body/listId",
          schemaPath: "#/properties/body/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        },
        {
          instancePath: "/body/name",
          schemaPath: "#/properties/body/properties/name/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}





### test POST /task without body.listId and body.description
POST {{baseUrl}}/task
Content-Type: application/json
{}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        },
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "description"
          },
          message: "must have required property description"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}





### test POST /task with body.listId="" and body.description=""
POST {{baseUrl}}/task
Content-Type: application/json
{"listId": "", "description": ""}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body/listId",
          schemaPath: "#/properties/body/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        },
        {
          instancePath: "/body/description",
          schemaPath: "#/properties/body/properties/description/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}





### test GET /task without queryStringParameters.listId and queryStringParameters.taskId
GET {{baseUrl}}/task
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        },
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "taskId"
          },
          message: "must have required property taskId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test GET /task with queryStringParameters.listId="" and queryStringParameters.taskId=""
GET {{baseUrl}}/task?listId=&taskId=
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters/listId",
          schemaPath: "#/properties/queryStringParameters/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        },
        {
          instancePath: "/queryStringParameters/taskId",
          schemaPath: "#/properties/queryStringParameters/properties/taskId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test DELETE /task without queryStringParameters.listId and queryStringParameters.taskId
DELETE {{baseUrl}}/task
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        },
        {
          instancePath: "/queryStringParameters",
          schemaPath: "#/properties/queryStringParameters/required",
          keyword: "required",
          params: {
            missingProperty: "taskId"
          },
          message: "must have required property taskId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test DELETE /task with queryStringParameters.listId="" and queryStringParameters.taskId=""
DELETE {{baseUrl}}/task?listId=&taskId=
Content-Type: application/json
> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/queryStringParameters/listId",
          schemaPath: "#/properties/queryStringParameters/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        },
        {
          instancePath: "/queryStringParameters/taskId",
          schemaPath: "#/properties/queryStringParameters/properties/taskId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


### test PUT /task without body.listId and body.taskId
PUT {{baseUrl}}/task
Content-Type: application/json
{}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "listId"
          },
          message: "must have required property listId"
        },
        {
          instancePath: "/body",
          schemaPath: "#/properties/body/required",
          keyword: "required",
          params: {
            missingProperty: "taskId"
          },
          message: "must have required property taskId"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}





### test PUT /task with body.listId="" and body.taskId=""
PUT {{baseUrl}}/task
Content-Type: application/json
{"listId":"", "taskId": ""}

> {%
client.test("status=400", function () {
  client.assert(response.status === 400, "status code error")
  client.assert(JSON.stringify(response.body) == JSON.stringify({
    data: {
      validation: [
        {
          instancePath: "/body/listId",
          schemaPath: "#/properties/body/properties/listId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        },
        {
          instancePath: "/body/taskId",
          schemaPath: "#/properties/body/properties/taskId/minLength",
          keyword: "minLength",
          params: {
            limit: 1
          },
          message: "must NOT be shorter than 1 character"
        }
      ]
    },
    message: "Event object failed validation",
    status: "bad request"
  }))
})
%}


